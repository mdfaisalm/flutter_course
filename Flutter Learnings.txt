3/24
Create New Project
Blank App
MaterialApp Widget
Center Widget
Text Widget

3/26
, for comments
Scaffold Widget (complete base Widget for appbar, navigation, title, bottombar and etc...)
Hide Debug Banner
Appbar Widget
Title
BG Color (for Scaffold appbar)
Colors
BG Color (for Scaffold body)
Body (of Scaffold)
Image
NetworkImage Widget
Alt+Enter (for options and auto code of widget)

3/27
Create images folder as assets
Copy assets to folders and Define in pubspec.yaml file
Yaml file works with indentation (2 spaces)
AssetImage Widget

3/28
Create icons with appicon.co
Copy assets to android and ios folders for app icon
create image asset from app icon to adjust padding of app icon

6/40
Hot Reload (instant run on saving, same state of all views except changed lines)
Stateless Wisget (Required for Hot Reload)
Hot Restart (instant run but reset all views state)

6/41
Container (Can contain only one child, occupied full screen if no child, otherwise big as child| Container without Scaffold Widget holds fullscreen)
SafeArea Widget (To avoid buttons and notches,adding bar adjust top notches automatically, so no need of safearea while using appbar)
width, height of container
Margins  (EdgeInsets (all,only,ltrb, symetric (same top,bottom and right,left)))
Paddings (EdgeInsets (all,only,ltrb, symetric (same top,bottom and right,left)))

6/42
Columns and Rows
columns and rows contains list of Widget
columns by default take full height (can be set wrap to children by mainAxisSize:min)
columns by default wrap width
verticalDirection of column (vertical direction of children)
mainAxisAlignment of column (vertical layout_gravity of children)
crossAxisAlignment of column (horizontal layout_gravity of children, stretch for fullscreen)

rows by default take full width (can be set wrap to children by mainAxisSize:min)
rows by default wrap height
verticalDirection of row (vertical direction of children)
mainAxisAlignment of row (horizontal layout_gravity of children)
crossAxisAlignment of horizontal (vertical layout_gravity of children, stretch for fullscreen)

double.infinity size (fullScreen,(test may be full of parent))
SizedBox Widget (for empty spacing, just like a view in android)

6/44
CircleAvatar
TextStyle (fontWeight, size, color, font family, letter spacing)

6/45
Custom Fonts

6/46
Icon Widget

6/47
Card Widget
Padding Class
ListTile Widget (problem while want to set padding to 0 of all sides, so use custom widget row with 2 containers, 1 for icon other for text)
Divider Widget

7/51
Expanded Widget (just like a weight property in linear layout)(must be a descendant of a Row, Column, or Flex, and the path from the Expanded widget to its enclosing Row, Column, or Flex must contain only StatelessWidgets or StatefulWidgets (not other kinds of widgets, like RenderObjectWidgets).
only one child, flex property to set ratio, divides full with (for rows) by childs depending on ratio. default ratio is 1
in row or column only those children which are enclosed with expanded

7/52
using intention actions like bulb icon on left on selected code-line and on flutter outline panel

7/53
FlatButton (onPressed)
print (just like logcat)

7/55
Variables (String interpolation with $ eg. "abc&variable&d")

7/57
Dart is "statically typed language" means defining a variable can store only that type of data. Dynamically typed language
Dart can be used as "Dynamically typed language" by defining dynamic data type, which can be assigned any value even at the time of defining.
Dart variable var can also be used as dynamic data type by leaving un-defined at the time of definition.

7/58
Stateful (provide a method to redraw screen) vs Stateless Widget(can't change state of screen)

7/59
Math Library
Random Number

7/62
Method Creation

8/6
8 ball magic app

9/75
import flutter packages/libraries

9/76
play sounds
SoundsApp

9/83
Arrow Functions (arrow syntax => is used when there is only one line code in calling method
,void main()=>runApp(MyApp()) is equivalent to below method
void main() {
 runApp(MyApp());
 }
 and
 int add()=>5+2;
 is equivalent to
 int add(){
 return 5+2;
 }
 and
  int add(int a,int b)=>a+b;
  is equivalent to
  int add(int a,int b){
  return a+b;
  }

10/88
Lists

10/101
Quizzer App
Import Alert Dialog flutter package

10/102
syntax sugar (assign default values in constructor without assignment operator in body)
class Question{
    String questionText;
    bool questionAnswer;

    Question (String a, bool b){
        questionText=a;
        questionAnswer=b;
    }
}

is equal to
class Question{
    String questionText;
    bool questionAnswer;

    Question (this.questionText, this.questionAnswer);
}

11/105
Destini - StoryTeller
BoxDecoration and DecorationImage for container background image with scale types
Visibility widget for show/hide

12/122
ThemeData
HexDecimal Colors
CopyWith (to override specific part of theme)
Theme Widget (Wrap Widgets with Theme Widget for deeper level individual customization)

12/123
Box Decoration (use color inside box decoration instead of color as major property of container,otherwise will crash due to ambiguous color property)
DRY - Don't Repeat Yourself
Extract Widget (Widget to a Class, Flutter Outline)
Keys (https://www.youtube.com/watch?v=kn0EOS-ZiIc)
@required (assign to required params of method)

12/124
Immutable (can't change, final, const, stateless widget etc)
final vs const (final can be assigned runtime values(after code compiled) as (final a=Date.now()), but const can't)

12/125
font_awesome_flutter package

12/126
GestureDetector Widget (best alternative for click listener instead of TextButton to avoid extra styling like margin n padding)

12/127
Enums (use enums instead of numbers or string when more than one options for a property, to avoid confusion with numbers after long time of code, meaningful code lines)
//Without Enum
void main(){
MyCarColor myCarColor = MyCarColor();
myCarColor.setCarColor(1);
}
class MyCarColor(){
//1 for red, 2 for blue, 3 for brown
int color;
public setCarColor(int color){
this.color=color;
}
}

//With Enum
void main(){
MyCarColor myCarColor = MyCarColor();
myCarColor.setCarColor(RED);
}
class MyCarColor(){
int color;
public setCarColor(int color){
this.color=color;
}
}

enum CarColors{
RED,
BLUE,
BROWN
}

12/128
Ternary Operators
expression?then:else
age>14?young:child

12/129
Functions as parameters
void main(){
int result= calculator(5,8,add or multiple);
}

int calculator(int a,int b, Function function){
return function(a,b);
}

int add(int a,int b){
return a+b;
}

int multiply(int a,int b){
return a*b;
}

also we can name a Function as
Function calculator=(int a,int b, Function){
return calculator(a,b);
}

and another example
void main(){
Car myCar=Car(slowDrive);//setting Car function value as slowDrive at initialization
myCar.drive();//calling slowDrive method
myCar.drive=fastDrive;//changing value of drive function
myCar.drive();//calling fastDrive Method
}

class Car{
Function drive;
Car ({this.drive});
}

void slowDrive(){
print ("Slow");
}

void fastDrive(){
print ("Fast");
}

12/130
constants file
to us crossAxisAlignment.baseline, should set textBaseLine also
toString() method
toDouble() method
Slider Widget

12/131
Embedding Slider Widget in SliderTheme Widget and data is SliderThemeData
of(context) method on SliderTheme to get function of copyWith()
SliderTheme as MaterialApp ThemeData child as default SliderTheme of whole App

12/132
creating Custom Widgets from scratch (for example by use of RawMaterialButton, RoundedRectangleBorder and CircleBorder)

12/133
Navigator (push, pop)
Navigator.push(context,
 MaterialPageRoute(
     builder: (context){
        return screen2();
}));
Navigator.pop(context);
}

Routes (defined in MaterialApp Widget, can use one of two options as launcher screen at Material App Level 1.initialRoute or 2.home)
initialRoute:('/'),
routes: {
    '/':(context)=> Screen0(),
    '/screen1':(context)=> Screen1(),
    '/screen2':(context)=> Screen2(),
}
to navigate with routes use
Navigator.pushNamed(context, "/screen1");

12/134
Maps (as HashMap, Map<keyType,valueType>)

12/Extras
FittedBox to scale content according to fit type

13/140
Location flutter package
Permissions

13/141
Duration n Sleep
Future.delayed(time, task)
Sleep is synced as it holds whole code but future just scheduler without delaying next lines of code
Async and await
Await can be applied on method returned value if method have Future as return type
Future as return type
Future is promise of something that is not ready yet just like a receipt of coffee will be offered later as ready

13/142
Stateless Widget lifecycle consist of build method
Stateful Widget lifecycle consist of (initState() to init,build() to draw, deactivate() to destroy)

13/143
to handle null you can use ?? null Aware Operator
variable??default
margin??30 means if margin is null use 30 else use margin variable value
Throw Exception with "throw" keyword

13/146
http request with apis
add as keyword after import "package" to use as alias like import "flutter/abc.dart" as abc

13/149
flutter_spinkit package for loadings

13/150
inside a stateful widget class,to link main class with state class, use "widget" object

13/153
TextField Widget for text input field (TextStyle widget as style, InputDecoration(icon,hint,border with OutlineInputBorder widget) as decoration, input for valueChanges)

13/154
Pass data backward with pop method and value will be get on point from where this Screen was pushed